generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  FIELD_OWNER
  REGULAR_USER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  phone     String?
  avatar    String?
  role      UserRole @default(REGULAR_USER)
  password  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courts   Court[] // User one-to-many Courts
  bookings Booking[] // User one-to-many Bookings

  @@index([email])

  @@map("users")
}

model Court {
  id           Int      @id @default(autoincrement())
  name         String
  description  String
  location     String
  pricePerHour Float
  image        String
  facilities   String[]
  isActive     Boolean  @default(true)
  ownerId      Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  owner    User      @relation(fields: [ownerId], references: [id], onDelete: Cascade) // Courts Many-to-One Owner
  bookings Booking[] // Court one-to-many Bookings

  @@index([ownerId])

  @@map("courts")
}

model Booking {
  id            Int           @id @default(autoincrement())
  date          String
  startTime     String
  endTime       String
  totalPrice    Float
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  notes         String?
  userId        Int
  courtId       Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade) // User one-to-many Bookings
  court Court @relation(fields: [courtId], references: [id], onDelete: Cascade) // Court one-to-many Bookings

  @@index([userId, courtId, date, startTime, endTime], name: "bookings_unique")

  @@map("bookings")
}